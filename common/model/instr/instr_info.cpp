#include <stdexcept>
#include <string>
#include <vector>

#include "instr_info.h"

struct InstructionView {
    const char* mnemonic;
    InstrKey key;
    InstrFormat format;
    InstrFormat extendedFormat;
};

static inline const InstructionView instructionRepo[] = {
    // SOP1 FORMAT
    {"s_abs_i32", S_ABS_I32, SOP1, UNDEFINED},
    {"s_and_saveexec_b64", S_AND_SAVEEXEC_B64, SOP1, UNDEFINED},
    {"s_andn1_saveexec_b64", S_ANDN1_SAVEEXEC_B64, SOP1, UNDEFINED},
    {"s_andn1_wrexec_b64", S_ANDN1_WREXEC_B64, SOP1, UNDEFINED},
    {"s_andn2_saveexec_b64", S_ANDN2_SAVEEXEC_B64, SOP1, UNDEFINED},
    {"s_andn2_wrexec_b64", S_ANDN2_WREXEC_B64, SOP1, UNDEFINED},
    {"s_bcnt0_i32_b32", S_BCNT0_I32_B32, SOP1, UNDEFINED},
    {"s_bcnt0_i32_b64", S_BCNT0_I32_B64, SOP1, UNDEFINED},
    {"s_bcnt1_i32_b32", S_BCNT1_I32_B32, SOP1, UNDEFINED},
    {"s_bcnt1_i32_b64", S_BCNT1_I32_B64, SOP1, UNDEFINED},
    {"s_bitreplicate_b64_b32", S_BITREPLICATE_B64_B32, SOP1, UNDEFINED},
    {"s_bitset0_b32", S_BITSET0_B32, SOP1, UNDEFINED},
    {"s_bitset0_b64", S_BITSET0_B64, SOP1, UNDEFINED},
    {"s_bitset1_b32", S_BITSET1_B32, SOP1, UNDEFINED},
    {"s_bitset1_b64", S_BITSET1_B64, SOP1, UNDEFINED},
    {"s_brev_b32", S_BREV_B32, SOP1, UNDEFINED},
    {"s_brev_b64", S_BREV_B64, SOP1, UNDEFINED},
    {"s_cbranch_join", S_CBRANCH_JOIN, SOP1, UNDEFINED},
    {"s_cmov_b32", S_CMOV_B32, SOP1, UNDEFINED},
    {"s_cmov_b64", S_CMOV_B64, SOP1, UNDEFINED},
    {"s_ff0_i32_b32", S_FF0_I32_B32, SOP1, UNDEFINED},
    {"s_ff0_i32_b64", S_FF0_I32_B64, SOP1, UNDEFINED},
    {"s_ff1_i32_b32", S_FF1_I32_B32, SOP1, UNDEFINED},
    {"s_ff1_i32_b64", S_FF1_I32_B64, SOP1, UNDEFINED},
    {"s_flbit_i32_b32", S_FLBIT_I32_B32, SOP1, UNDEFINED},
    {"s_flbit_i32_b64", S_FLBIT_I32_B64, SOP1, UNDEFINED},
    {"s_flbit_i32", S_FLBIT_I32, SOP1, UNDEFINED},
    {"s_flbit_i32_i64", S_FLBIT_I32_I64, SOP1, UNDEFINED},
    {"s_getpc_b64", S_GETPC_B64, SOP1, UNDEFINED},
    {"s_mov_b32", S_MOV_B32, SOP1, UNDEFINED},
    {"s_mov_b64", S_MOV_B64, SOP1, UNDEFINED},
    {"s_movreld_b32", S_MOVRELD_B32, SOP1, UNDEFINED},
    {"s_movreld_b64", S_MOVRELD_B64, SOP1, UNDEFINED},
    {"s_movrels_b32", S_MOVRELS_B32, SOP1, UNDEFINED},
    {"s_movrels_b64", S_MOVRELS_B64, SOP1, UNDEFINED},
    {"s_nand_saveexec_b64", S_NAND_SAVEEXEC_B64, SOP1, UNDEFINED},
    {"s_nor_saveexec_b64", S_NOR_SAVEEXEC_B64, SOP1, UNDEFINED},
    {"s_not_b32", S_NOT_B32, SOP1, UNDEFINED},
    {"s_not_b64", S_NOT_B64, SOP1, UNDEFINED},
    {"s_or_saveexec_b64", S_OR_SAVEEXEC_B64, SOP1, UNDEFINED},
    {"s_orn2_saveexec_b64", S_ORN2_SAVEEXEC_B64, SOP1, UNDEFINED},
    {"s_quadmask_b32", S_QUADMASK_B32, SOP1, UNDEFINED},
    {"s_quadmask_b64", S_QUADMASK_B64, SOP1, UNDEFINED},
    {"s_rfe_b64", S_RFE_B64, SOP1, UNDEFINED},
    {"s_set_gpr_idx_idx", S_SET_GPR_IDX_IDX, SOP1, UNDEFINED},
    {"s_setpc_b64", S_SETPC_B64, SOP1, UNDEFINED},
    {"s_sext_i32_i8", S_SEXT_I32_I8, SOP1, UNDEFINED},
    {"s_sext_i32_i16", S_SEXT_I32_I16, SOP1, UNDEFINED},
    {"s_swappc_b64", S_SWAPPC_B64, SOP1, UNDEFINED},
    {"s_wqm_b32", S_WQM_B32, SOP1, UNDEFINED},
    {"s_wqm_b64", S_WQM_B64, SOP1, UNDEFINED},
    {"s_xnor_saveexec_b64", S_XNOR_SAVEEXEC_B64, SOP1, UNDEFINED},
    {"s_xor_saveexec_b64", S_XOR_SAVEEXEC_B64, SOP1, UNDEFINED},

    // SOP2_FORMAT
    {"s_absdiff_i32", S_ABSDIFF_I32, SOP2, UNDEFINED},
    {"s_addc_u32", S_ADDC_U32, SOP2, UNDEFINED},
    {"s_add_i32", S_ADD_I32, SOP2, UNDEFINED},
    {"s_add_u32", S_ADD_U32, SOP2, UNDEFINED},
    {"s_and_b32", S_AND_B32, SOP2, UNDEFINED},
    {"s_and_b64", S_AND_B64, SOP2, UNDEFINED},
    {"s_andn2_b32", S_ANDN2_B32, SOP2, UNDEFINED},
    {"s_andn2_b64", S_ANDN2_B64, SOP2, UNDEFINED},
    {"s_ashr_i32", S_ASHR_I32, SOP2, UNDEFINED},
    {"s_ashr_i64", S_ASHR_I64, SOP2, UNDEFINED},
    {"s_bfe_i32", S_BFE_I32, SOP2, UNDEFINED},
    {"s_bfe_i64", S_BFE_I64, SOP2, UNDEFINED},
    {"s_bfe_u32", S_BFE_U32, SOP2, UNDEFINED},
    {"s_bfe_u64", S_BFE_U64, SOP2, UNDEFINED},
    {"s_bfm_b32", S_BFM_B32, SOP2, UNDEFINED},
    {"s_bfm_b64", S_BFM_B64, SOP2, UNDEFINED},
    {"s_cbranch_g_fork", S_CBRANCH_G_FORK, SOP2, UNDEFINED},
    {"s_cselect_b32", S_CSELECT_B32, SOP2, UNDEFINED},
    {"s_cselect_b64", S_CSELECT_B64, SOP2, UNDEFINED},
    {"s_lshl_b32", S_LSHL_B32, SOP2, UNDEFINED},
    {"s_lshl_b64", S_LSHL_B64, SOP2, UNDEFINED},
    {"s_lshl1_add_u32", S_LSHL1_ADD_U32, SOP2, UNDEFINED},
    {"s_lshl2_add_u32", S_LSHL2_ADD_U32, SOP2, UNDEFINED},
    {"s_lshl3_add_u32", S_LSHL3_ADD_U32, SOP2, UNDEFINED},
    {"s_lshl4_add_u32", S_LSHL4_ADD_U32, SOP2, UNDEFINED},
    {"s_lshr_b32", S_LSHR_B32, SOP2, UNDEFINED},
    {"s_lshr_b64", S_LSHR_B64, SOP2, UNDEFINED},
    {"s_max_i32", S_MAX_I32, SOP2, UNDEFINED},
    {"s_max_u32", S_MAX_U32, SOP2, UNDEFINED},
    {"s_min_i32", S_MIN_I32, SOP2, UNDEFINED},
    {"s_min_u32", S_MIN_U32, SOP2, UNDEFINED},
    {"s_mul_hi_i32", S_MUL_HI_I32, SOP2, UNDEFINED},
    {"s_mul_hi_u32", S_MUL_HI_U32, SOP2, UNDEFINED},
    {"s_mul_i32", S_MUL_I32, SOP2, UNDEFINED},
    {"s_nand_b32", S_NAND_B32, SOP2, UNDEFINED},
    {"s_nand_b64", S_NAND_B64, SOP2, UNDEFINED},
    {"s_nor_b32", S_NOR_B32, SOP2, UNDEFINED},
    {"s_nor_b64", S_NOR_B64, SOP2, UNDEFINED},
    {"s_or_b32", S_OR_B32, SOP2, UNDEFINED},
    {"s_or_b64", S_OR_B64, SOP2, UNDEFINED},
    {"s_orn2_b32", S_ORN2_B32, SOP2, UNDEFINED},
    {"s_orn2_b64", S_ORN2_B64, SOP2, UNDEFINED},
    {"s_pack_hh_b32_b16", S_PACK_HH_B32_B16, SOP2, UNDEFINED},
    {"s_pack_lh_b32_b16", S_PACK_LH_B32_B16, SOP2, UNDEFINED},
    {"s_pack_ll_b32_b16", S_PACK_LL_B32_B16, SOP2, UNDEFINED},
    {"s_rfe_restore_b64", S_RFE_RESTORE_B64, SOP2, UNDEFINED},
    {"s_subb_u32", S_SUBB_U32, SOP2, UNDEFINED},
    {"s_sub_i32", S_SUB_I32, SOP2, UNDEFINED},
    {"s_sub_u32", S_SUB_U32, SOP2, UNDEFINED},
    {"s_xnor_b32", S_XNOR_B32, SOP2, UNDEFINED},
    {"s_xnor_b64", S_XNOR_B64, SOP2, UNDEFINED},
    {"s_xor_b32", S_XOR_B32, SOP2, UNDEFINED},
    {"s_xor_b64", S_XOR_B64, SOP2, UNDEFINED},

    // SOPK_FORMAT
    {"s_addk_i32", S_ADDK_I32, SOPK, UNDEFINED},
    {"s_call_b64", S_CALL_B64, SOPK, UNDEFINED},
    {"s_cbranch_i_fork", S_CBRANCH_I_FORK, SOPK, UNDEFINED},
    {"s_cmovk_i32", S_CMOVK_I32, SOPK, UNDEFINED},
    {"s_cmpk_eq_i32", S_CMPK_EQ_I32, SOPK, UNDEFINED},
    {"s_cmpk_eq_u32", S_CMPK_EQ_U32, SOPK, UNDEFINED},
    {"s_cmpk_ge_i32", S_CMPK_GE_I32, SOPK, UNDEFINED},
    {"s_cmpk_ge_u32", S_CMPK_GE_U32, SOPK, UNDEFINED},
    {"s_cmpk_gt_i32", S_CMPK_GT_I32, SOPK, UNDEFINED},
    {"s_cmpk_gt_u32", S_CMPK_GT_U32, SOPK, UNDEFINED},
    {"s_cmpk_le_i32", S_CMPK_LE_I32, SOPK, UNDEFINED},
    {"s_cmpk_le_u32", S_CMPK_LE_U32, SOPK, UNDEFINED},
    {"s_cmpk_lg_i32", S_CMPK_LG_I32, SOPK, UNDEFINED},
    {"s_cmpk_lg_u32", S_CMPK_LG_U32, SOPK, UNDEFINED},
    {"s_cmpk_lt_i32", S_CMPK_LT_I32, SOPK, UNDEFINED},
    {"s_cmpk_lt_u32", S_CMPK_LT_U32, SOPK, UNDEFINED},
    {"s_getreg_b32", S_GETREG_B32, SOPK, UNDEFINED},
    {"s_movk_i32", S_MOVK_I32, SOPK, UNDEFINED},
    {"s_mulk_i32", S_MULK_I32, SOPK, UNDEFINED},
    {"s_setreg_b32", S_SETREG_B32, SOPK, UNDEFINED},
    {"s_setreg_imm32_b32", S_SETREG_IMM32_B32, SOPK, UNDEFINED},

    // SOPC
    {"s_bitcmp0_b32", S_BITCMP0_B32, SOPC, UNDEFINED},
    {"s_bitcmp0_b64", S_BITCMP0_B64, SOPC, UNDEFINED},
    {"s_bitcmp1_b32", S_BITCMP1_B32, SOPC, UNDEFINED},
    {"s_bitcmp1_b64", S_BITCMP1_B64, SOPC, UNDEFINED},
    {"s_cmp_eq_i32", S_CMP_EQ_I32, SOPC, UNDEFINED},
    {"s_cmp_eq_u32", S_CMP_EQ_U32, SOPC, UNDEFINED},
    {"s_cmp_eq_u64", S_CMP_EQ_U64, SOPC, UNDEFINED},
    {"s_cmp_ge_i32", S_CMP_GE_I32, SOPC, UNDEFINED},
    {"s_cmp_ge_u32", S_CMP_GE_U32, SOPC, UNDEFINED},
    {"s_cmp_gt_i32", S_CMP_GT_I32, SOPC, UNDEFINED},
    {"s_cmp_gt_u32", S_CMP_GT_U32, SOPC, UNDEFINED},
    {"s_cmp_le_i32", S_CMP_LE_I32, SOPC, UNDEFINED},
    {"s_cmp_le_u32", S_CMP_LE_U32, SOPC, UNDEFINED},
    {"s_cmp_lg_i32", S_CMP_LG_I32, SOPC, UNDEFINED},
    {"s_cmp_lg_u32", S_CMP_LG_U32, SOPC, UNDEFINED},
    {"s_cmp_lg_u64", S_CMP_LG_U64, SOPC, UNDEFINED},
    {"s_cmp_ne_u64", S_CMP_NE_U64, SOPC, UNDEFINED},
    {"s_cmp_lt_i32", S_CMP_LT_I32, SOPC, UNDEFINED},
    {"s_cmp_lt_u32", S_CMP_LT_U32, SOPC, UNDEFINED},
    {"s_set_gpr_idx_on", S_SET_GPR_IDX_ON, SOPC, UNDEFINED},
    {"s_setvskip", S_SETVSKIP, SOPC, UNDEFINED},
    // END SOPC

    // SOPP
    {"s_barrier", S_BARRIER, SOPP, UNDEFINED},
    {"s_branch", S_BRANCH, SOPP, UNDEFINED},
    {"s_cbranch_cdbgsys", S_CBRANCH_CDBGSYS, SOPP, UNDEFINED},
    {"s_cbranch_cdbgsys_and_user", S_CBRANCH_CDBGSYS_AND_USER, SOPP, UNDEFINED},
    {"s_cbranch_cdbgsys_or_user", S_CBRANCH_CDBGSYS_OR_USER, SOPP, UNDEFINED},
    {"s_cbranch_cdbguser", S_CBRANCH_CDBGUSER, SOPP, UNDEFINED},
    {"s_cbranch_execnz", S_CBRANCH_EXECNZ, SOPP, UNDEFINED},
    {"s_cbranch_execz", S_CBRANCH_EXECZ, SOPP, UNDEFINED},
    {"s_cbranch_scc0", S_CBRANCH_SCC0, SOPP, UNDEFINED},
    {"s_cbranch_scc1", S_CBRANCH_SCC1, SOPP, UNDEFINED},
    {"s_cbranch_vccnz", S_CBRANCH_VCCNZ, SOPP, UNDEFINED},
    {"s_cbranch_vccz", S_CBRANCH_VCCZ, SOPP, UNDEFINED},
    {"s_decperflevel", S_DECPERFLEVEL, SOPP, UNDEFINED},
    {"s_endpgm", S_ENDPGM, SOPP, UNDEFINED},
    {"s_endpgm_ordered_ps_done", S_ENDPGM_ORDERED_PS_DONE, SOPP, UNDEFINED},
    {"s_endpgm_saved", S_ENDPGM_SAVED, SOPP, UNDEFINED},
    {"s_icache_inv", S_ICACHE_INV, SOPP, UNDEFINED},
    {"s_incperflevel", S_INCPERFLEVEL, SOPP, UNDEFINED},
    {"s_nop", S_NOP, SOPP, UNDEFINED},
    {"s_sendmsg", S_SENDMSG, SOPP, UNDEFINED},
    {"s_sendmsghalt", S_SENDMSGHALT, SOPP, UNDEFINED},
    {"s_set_gpr_idx_mode", S_SET_GPR_IDX_MODE, SOPP, UNDEFINED},
    {"s_set_gpr_idx_off", S_SET_GPR_IDX_OFF, SOPP, UNDEFINED},
    {"s_sethalt", S_SETHALT, SOPP, UNDEFINED},
    {"s_setkill", S_SETKILL, SOPP, UNDEFINED},
    {"s_setprio", S_SETPRIO, SOPP, UNDEFINED},
    {"s_sleep", S_SLEEP, SOPP, UNDEFINED},
    {"s_trap", S_TRAP, SOPP, UNDEFINED},
    {"s_ttracedata", S_TTRACEDATA, SOPP, UNDEFINED},
    {"s_waitcnt", S_WAITCNT, SOPP, UNDEFINED},

    // SMEM
    {"s_atomic_add", S_ATOMIC_ADD, UNDEFINED, SMEM},
    {"s_atomic_add_x2", S_ATOMIC_ADD_X2, UNDEFINED, SMEM},
    {"s_atomic_and", S_ATOMIC_AND, UNDEFINED, SMEM},
    {"s_atomic_and_x2", S_ATOMIC_AND_X2, UNDEFINED, SMEM},
    {"s_atomic_cmpswap", S_ATOMIC_CMPSWAP, UNDEFINED, SMEM},
    {"s_atomic_cmpswap_x2", S_ATOMIC_CMPSWAP_X2, UNDEFINED, SMEM},
    {"s_atomic_dec", S_ATOMIC_DEC, UNDEFINED, SMEM},
    {"s_atomic_dec_x2", S_ATOMIC_DEC_X2, UNDEFINED, SMEM},
    {"s_atomic_inc", S_ATOMIC_INC, UNDEFINED, SMEM},
    {"s_atomic_inc_x2", S_ATOMIC_INC_X2, UNDEFINED, SMEM},
    {"s_atomic_or", S_ATOMIC_OR, UNDEFINED, SMEM},
    {"s_atomic_or_x2", S_ATOMIC_OR_X2, UNDEFINED, SMEM},
    {"s_atomic_smax", S_ATOMIC_SMAX, UNDEFINED, SMEM},
    {"s_atomic_smax_x2", S_ATOMIC_SMAX_X2, UNDEFINED, SMEM},
    {"s_atomic_smin", S_ATOMIC_SMIN, UNDEFINED, SMEM},
    {"s_atomic_smin_x2", S_ATOMIC_SMIN_X2, UNDEFINED, SMEM},
    {"s_atomic_sub", S_ATOMIC_SUB, UNDEFINED, SMEM},
    {"s_atomic_sub_x2", S_ATOMIC_SUB_X2, UNDEFINED, SMEM},
    {"s_atomic_swap", S_ATOMIC_SWAP, UNDEFINED, SMEM},
    {"s_atomic_swap_x2", S_ATOMIC_SWAP_X2, UNDEFINED, SMEM},
    {"s_atomic_umax", S_ATOMIC_UMAX, UNDEFINED, SMEM},
    {"s_atomic_umax_x2", S_ATOMIC_UMAX_X2, UNDEFINED, SMEM},
    {"s_atomic_umin", S_ATOMIC_UMIN, UNDEFINED, SMEM},
    {"s_atomic_umin_x2", S_ATOMIC_UMIN_X2, UNDEFINED, SMEM},
    {"s_atomic_xor", S_ATOMIC_XOR, UNDEFINED, SMEM},
    {"s_atomic_xor_x2", S_ATOMIC_XOR_X2, UNDEFINED, SMEM},
    {"s_buffer_atomic_add", S_BUFFER_ATOMIC_ADD, UNDEFINED, SMEM},
    {"s_buffer_atomic_add_x2", S_BUFFER_ATOMIC_ADD_X2, UNDEFINED, SMEM},
    {"s_buffer_atomic_and", S_BUFFER_ATOMIC_AND, UNDEFINED, SMEM},
    {"s_buffer_atomic_and_x2", S_BUFFER_ATOMIC_AND_X2, UNDEFINED, SMEM},
    {"s_buffer_atomic_cmpswap", S_BUFFER_ATOMIC_CMPSWAP, UNDEFINED, SMEM},
    {"s_buffer_atomic_cmpswap_x2", S_BUFFER_ATOMIC_CMPSWAP_X2, UNDEFINED, SMEM},
    {"s_buffer_atomic_dec", S_BUFFER_ATOMIC_DEC, UNDEFINED, SMEM},
    {"s_buffer_atomic_dec_x2", S_BUFFER_ATOMIC_DEC_X2, UNDEFINED, SMEM},
    {"s_buffer_atomic_inc", S_BUFFER_ATOMIC_INC, UNDEFINED, SMEM},
    {"s_buffer_atomic_inc_x2", S_BUFFER_ATOMIC_INC_X2, UNDEFINED, SMEM},
    {"s_buffer_atomic_or", S_BUFFER_ATOMIC_OR, UNDEFINED, SMEM},
    {"s_buffer_atomic_or_x2", S_BUFFER_ATOMIC_OR_X2, UNDEFINED, SMEM},
    {"s_buffer_atomic_smax", S_BUFFER_ATOMIC_SMAX, UNDEFINED, SMEM},
    {"s_buffer_atomic_smax_x2", S_BUFFER_ATOMIC_SMAX_X2, UNDEFINED, SMEM},
    {"s_buffer_atomic_smin", S_BUFFER_ATOMIC_SMIN, UNDEFINED, SMEM},
    {"s_buffer_atomic_smin_x2", S_BUFFER_ATOMIC_SMIN_X2, UNDEFINED, SMEM},
    {"s_buffer_atomic_sub", S_BUFFER_ATOMIC_SUB, UNDEFINED, SMEM},
    {"s_buffer_atomic_sub_x2", S_BUFFER_ATOMIC_SUB_X2, UNDEFINED, SMEM},
    {"s_buffer_atomic_swap", S_BUFFER_ATOMIC_SWAP, UNDEFINED, SMEM},
    {"s_buffer_atomic_swap_x2", S_BUFFER_ATOMIC_SWAP_X2, UNDEFINED, SMEM},
    {"s_buffer_atomic_umax", S_BUFFER_ATOMIC_UMAX, UNDEFINED, SMEM},
    {"s_buffer_atomic_umax_x2", S_BUFFER_ATOMIC_UMAX_X2, UNDEFINED, SMEM},
    {"s_buffer_atomic_umin", S_BUFFER_ATOMIC_UMIN, UNDEFINED, SMEM},
    {"s_buffer_atomic_umin_x2", S_BUFFER_ATOMIC_UMIN_X2, UNDEFINED, SMEM},
    {"s_buffer_atomic_xor", S_BUFFER_ATOMIC_XOR, UNDEFINED, SMEM},
    {"s_buffer_atomic_xor_x2", S_BUFFER_ATOMIC_XOR_X2, UNDEFINED, SMEM},
    {"s_buffer_load_dword", S_BUFFER_LOAD_DWORD, UNDEFINED, SMEM},
    {"s_buffer_load_dwordx16", S_BUFFER_LOAD_DWORDX16, UNDEFINED, SMEM},
    {"s_buffer_load_dwordx2", S_BUFFER_LOAD_DWORDX2, UNDEFINED, SMEM},
    {"s_buffer_load_dwordx4", S_BUFFER_LOAD_DWORDX4, UNDEFINED, SMEM},
    {"s_buffer_load_dwordx8", S_BUFFER_LOAD_DWORDX8, UNDEFINED, SMEM},
    {"s_buffer_store_dword", S_BUFFER_STORE_DWORD, UNDEFINED, SMEM},
    {"s_buffer_store_dwordx2", S_BUFFER_STORE_DWORDX2, UNDEFINED, SMEM},
    {"s_buffer_store_dwordx4", S_BUFFER_STORE_DWORDX4, UNDEFINED, SMEM},
    {"s_dcache_discard", S_DCACHE_DISCARD, UNDEFINED, SMEM},
    {"s_dcache_discard_x2", S_DCACHE_DISCARD_X2, UNDEFINED, SMEM},
    {"s_dcache_inv", S_DCACHE_INV, UNDEFINED, SMEM},
    {"s_dcache_inv_vol", S_DCACHE_INV_VOL, UNDEFINED, SMEM},
    {"s_load_dword", S_LOAD_DWORD, UNDEFINED, SMEM},
    {"s_load_dwordx16", S_LOAD_DWORDX16, UNDEFINED, SMEM},
    {"s_load_dwordx2", S_LOAD_DWORDX2, UNDEFINED, SMEM},
    {"s_load_dwordx4", S_LOAD_DWORDX4, UNDEFINED, SMEM},
    {"s_load_dwordx8", S_LOAD_DWORDX8, UNDEFINED, SMEM},
    {"s_memrealtime", S_MEMREALTIME, UNDEFINED, SMEM},
    {"s_memtime", S_MEMTIME, UNDEFINED, SMEM},
    {"s_scratch_load_dword", S_SCRATCH_LOAD_DWORD, UNDEFINED, SMEM},
    {"s_scratch_load_dwordx2", S_SCRATCH_LOAD_DWORDX2, UNDEFINED, SMEM},
    {"s_scratch_load_dwordx4", S_SCRATCH_LOAD_DWORDX4, UNDEFINED, SMEM},
    {"s_scratch_store_dword", S_SCRATCH_STORE_DWORD, UNDEFINED, SMEM},
    {"s_scratch_store_dwordx2", S_SCRATCH_STORE_DWORDX2, UNDEFINED, SMEM},
    {"s_scratch_store_dwordx4", S_SCRATCH_STORE_DWORDX4, UNDEFINED, SMEM},
    {"s_store_dword", S_STORE_DWORD, UNDEFINED, SMEM},
    {"s_store_dwordx2", S_STORE_DWORDX2, UNDEFINED, SMEM},
    {"s_store_dwordx4", S_STORE_DWORDX4, UNDEFINED, SMEM},
    // END SMEM

    // VOP1
    {"v_mov_b32", V_MOV_B32, VOP1, UNDEFINED},
    {"v_bfrev_b32", V_BFREV_B32, VOP1, UNDEFINED},
    {"v_ffbh_u32", V_FFBH_U32, VOP1, UNDEFINED},
    {"v_ffbh_i32", V_FFBH_I32, VOP1, UNDEFINED},
    {"v_ffbl_b32", V_FFBL_B32, VOP1, UNDEFINED},
    {"v_swap_b32", V_SWAP_B32, VOP1, UNDEFINED},
    {"v_movreld_b32", V_MOVRELD_B32, VOP1, UNDEFINED},
    {"v_movrels_b32", V_MOVRELS_B32, VOP1, UNDEFINED},
    {"v_movrelsd_b32", V_MOVRELSD_B32, VOP1, UNDEFINED},
    {"v_not_b32", V_NOT_B32, VOP1, UNDEFINED},
    {"v_readfirstlane_b32", V_READFIRSTLANE_B32, VOP1, UNDEFINED},
    {"v_sat_pk_u8_i16", V_SAT_PK_U8_I16, VOP1, UNDEFINED},
    {"v_screen_partition_4se_b32", V_SCREEN_PARTITION_4SE_B32, VOP1, UNDEFINED},
    {"v_nop", V_NOP, VOP1, UNDEFINED},
    {"v_cvt_i32_f64", V_CVT_I32_F64, VOP1, UNDEFINED},
    {"v_cvt_f64_i32", V_CVT_F64_I32, VOP1, UNDEFINED},
    {"v_cvt_f32_i32", V_CVT_F32_I32, VOP1, UNDEFINED},
    {"v_cvt_f32_u32", V_CVT_F32_U32, VOP1, UNDEFINED},
    {"v_cvt_u32_f32", V_CVT_U32_F32, VOP1, UNDEFINED},
    {"v_cvt_i32_f32", V_CVT_I32_F32, VOP1, UNDEFINED},
    {"v_cvt_f16_f32", V_CVT_F16_F32, VOP1, UNDEFINED},
    {"v_cvt_f32_f16", V_CVT_F32_F16, VOP1, UNDEFINED},
    {"v_cvt_rpi_i32_f32", V_CVT_RPI_I32_F32, VOP1, UNDEFINED},
    {"v_cvt_flr_i32_f32", V_CVT_FLR_I32_F32, VOP1, UNDEFINED},
    {"v_cvt_off_f32_i4", V_CVT_OFF_F32_I4, VOP1, UNDEFINED},
    {"v_cvt_f32_f64", V_CVT_F32_F64, VOP1, UNDEFINED},
    {"v_cvt_f64_f32", V_CVT_F64_F32, VOP1, UNDEFINED},
    {"v_cvt_f32_ubyte0", V_CVT_F32_UBYTE0, VOP1, UNDEFINED},
    {"v_cvt_f32_ubyte1", V_CVT_F32_UBYTE1, VOP1, UNDEFINED},
    {"v_cvt_f32_ubyte2", V_CVT_F32_UBYTE2, VOP1, UNDEFINED},
    {"v_cvt_f32_ubyte3", V_CVT_F32_UBYTE3, VOP1, UNDEFINED},
    {"v_cvt_u32_f64", V_CVT_U32_F64, VOP1, UNDEFINED},
    {"v_cvt_f64_u32", V_CVT_F64_U32, VOP1, UNDEFINED},
    {"v_trunc_f64", V_TRUNC_F64, VOP1, UNDEFINED},
    {"v_ceil_f64", V_CEIL_F64, VOP1, UNDEFINED},
    {"v_rndne_f64", V_RNDNE_F64, VOP1, UNDEFINED},
    {"v_floor_f64", V_FLOOR_F64, VOP1, UNDEFINED},
    {"v_fract_f32", V_FRACT_F32, VOP1, UNDEFINED},
    {"v_trunc_f32", V_TRUNC_F32, VOP1, UNDEFINED},
    {"v_ceil_f32", V_CEIL_F32, VOP1, UNDEFINED},
    {"v_rndne_f32", V_RNDNE_F32, VOP1, UNDEFINED},
    {"v_floor_f32", V_FLOOR_F32, VOP1, UNDEFINED},
    {"v_exp_f32", V_EXP_F32, VOP1, UNDEFINED},
    {"v_log_f32", V_LOG_F32, VOP1, UNDEFINED},
    {"v_rcp_f32", V_RCP_F32, VOP1, UNDEFINED},
    {"v_rcp_iflag_f32", V_RCP_IFLAG_F32, VOP1, UNDEFINED},
    {"v_rsq_f32", V_RSQ_F32, VOP1, UNDEFINED},
    {"v_rcp_f64", V_RCP_F64, VOP1, UNDEFINED},
    {"v_rsq_f64", V_RSQ_F64, VOP1, UNDEFINED},
    {"v_sqrt_f32", V_SQRT_F32, VOP1, UNDEFINED},
    {"v_sqrt_f64", V_SQRT_F64, VOP1, UNDEFINED},
    {"v_sin_f32", V_SIN_F32, VOP1, UNDEFINED},
    {"v_cos_f32", V_COS_F32, VOP1, UNDEFINED},
    {"v_frexp_exp_i32_f64", V_FREXP_EXP_I32_F64, VOP1, UNDEFINED},
    {"v_frexp_mant_f64", V_FREXP_MANT_F64, VOP1, UNDEFINED},
    {"v_fract_f64", V_FRACT_F64, VOP1, UNDEFINED},
    {"v_frexp_exp_i32_f32", V_FREXP_EXP_I32_F32, VOP1, UNDEFINED},
    {"v_frexp_mant_f32", V_FREXP_MANT_F32, VOP1, UNDEFINED},
    {"v_clrexcp", V_CLREXCP, VOP1, UNDEFINED},
    {"v_cvt_f16_u16", V_CVT_F16_U16, VOP1, UNDEFINED},
    {"v_cvt_f16_i16", V_CVT_F16_I16, VOP1, UNDEFINED},
    {"v_cvt_u16_f16", V_CVT_U16_F16, VOP1, UNDEFINED},
    {"v_cvt_i16_f16", V_CVT_I16_F16, VOP1, UNDEFINED},
    {"v_rcp_f16", V_RCP_F16, VOP1, UNDEFINED},
    {"v_sqrt_f16", V_SQRT_F16, VOP1, UNDEFINED},
    {"v_rsq_f16", V_RSQ_F16, VOP1, UNDEFINED},
    {"v_log_f16", V_LOG_F16, VOP1, UNDEFINED},
    {"v_exp_f16", V_EXP_F16, VOP1, UNDEFINED},
    {"v_frexp_mant_f16", V_FREXP_MANT_F16, VOP1, UNDEFINED},
    {"v_frexp_exp_i16_f16", V_FREXP_EXP_I16_F16, VOP1, UNDEFINED},
    {"v_floor_f16", V_FLOOR_F16, VOP1, UNDEFINED},
    {"v_ceil_f16", V_CEIL_F16, VOP1, UNDEFINED},
    {"v_trunc_f16", V_TRUNC_F16, VOP1, UNDEFINED},
    {"v_rndne_f16", V_RNDNE_F16, VOP1, UNDEFINED},
    {"v_fract_f16", V_FRACT_F16, VOP1, UNDEFINED},
    {"v_sin_f16", V_SIN_F16, VOP1, UNDEFINED},
    {"v_cos_f16", V_COS_F16, VOP1, UNDEFINED},
    {"v_exp_legacy_f32", V_EXP_LEGACY_F32, VOP1, UNDEFINED},
    {"v_log_legacy_f32", V_LOG_LEGACY_F32, VOP1, UNDEFINED},
    {"v_cvt_norm_i16_f16", V_CVT_NORM_I16_F16, VOP1, UNDEFINED},
    {"v_cvt_norm_u16_f16", V_CVT_NORM_U16_F16, VOP1, UNDEFINED},

    // VOP2
    {"v_cndmask_b32", V_CNDMASK_B32, VOP2, UNDEFINED},
    {"v_add_f32", V_ADD_F32, VOP2, UNDEFINED},
    {"v_sub_f32", V_SUB_F32, VOP2, UNDEFINED},
    {"v_subrev_f32", V_SUBREV_F32, VOP2, UNDEFINED},
    {"v_mul_legacy_f32", V_MUL_LEGACY_F32, VOP2, UNDEFINED},
    {"v_mul_f32", V_MUL_F32, VOP2, UNDEFINED},
    {"v_mul_i32_i24", V_MUL_I32_I24, VOP2, UNDEFINED},
    {"v_mul_hi_i32_i24", V_MUL_HI_I32_I24, VOP2, UNDEFINED},
    {"v_mul_u32_u24", V_MUL_U32_U24, VOP2, UNDEFINED},
    {"v_mul_hi_u32_u24", V_MUL_HI_U32_U24, VOP2, UNDEFINED},
    {"v_min_f32", V_MIN_F32, VOP2, UNDEFINED},
    {"v_max_f32", V_MAX_F32, VOP2, UNDEFINED},
    {"v_min_i32", V_MIN_I32, VOP2, UNDEFINED},
    {"v_max_i32", V_MAX_I32, VOP2, UNDEFINED},
    {"v_min_u32", V_MIN_U32, VOP2, UNDEFINED},
    {"v_max_u32", V_MAX_U32, VOP2, UNDEFINED},
    {"v_lshrrev_b32", V_LSHRREV_B32, VOP2, UNDEFINED},
    {"v_and_b32", V_AND_B32, VOP2, UNDEFINED},
    {"v_or_b32", V_OR_B32, VOP2, UNDEFINED},
    {"v_xor_b32", V_XOR_B32, VOP2, UNDEFINED},
    {"v_mac_f32", V_MAC_F32, VOP2, UNDEFINED},
    {"v_madmk_f32", V_MADMK_F32, VOP2, UNDEFINED},
    {"v_madak_f32", V_MADAK_F32, VOP2, UNDEFINED},
    {"v_add_co_u32", V_ADD_CO_U32, VOP2, UNDEFINED},
    {"v_subrev_co_u32", V_SUBREV_CO_U32, VOP2, UNDEFINED},
    {"v_subb_co_u32", V_SUBB_CO_U32, VOP2, UNDEFINED},
    {"v_subbrev_co_u32", V_SUBBREV_CO_U32, VOP2, UNDEFINED},
    {"v_add_f16", V_ADD_F16, VOP2, UNDEFINED},
    {"v_sub_f16", V_SUB_F16, VOP2, UNDEFINED},
    {"v_subrev_f16", V_SUBREV_F16, VOP2, UNDEFINED},
    {"v_mul_f16", V_MUL_F16, VOP2, UNDEFINED},
    {"v_mac_f16", V_MAC_F16, VOP2, UNDEFINED},
    {"v_madmk_f16", V_MADMK_F16, VOP2, UNDEFINED},
    {"v_madak_f16", V_MADAK_F16, VOP2, UNDEFINED},
    {"v_add_u16", V_ADD_U16, VOP2, UNDEFINED},
    {"v_mul_lo_u16", V_MUL_LO_U16, VOP2, UNDEFINED},
    {"v_lshlrev_b16", V_LSHLREV_B16, VOP2, UNDEFINED},
    {"v_lshrrev_b16", V_LSHRREV_B16, VOP2, UNDEFINED},
    {"v_ashrrev_i16", V_ASHRREV_I16, VOP2, UNDEFINED},
    {"v_max_f16", V_MAX_F16, VOP2, UNDEFINED},
    {"v_min_f16", V_MIN_F16, VOP2, UNDEFINED},
    {"v_max_u16", V_MAX_U16, VOP2, UNDEFINED},
    {"v_max_i16", V_MAX_I16, VOP2, UNDEFINED},
    {"v_min_u16", V_MIN_U16, VOP2, UNDEFINED},
    {"v_min_i16", V_MIN_I16, VOP2, UNDEFINED},
    {"v_ldexp_f16", V_LDEXP_F16, VOP2, UNDEFINED},
    // VOP2: extended VOP3A
    {"v_subrev_u16", V_SUBREV_U16, VOP2, VOP3A},
    {"v_sub_u16", V_SUB_U16, VOP2, VOP3A},
    {"v_ashr_i32", V_ASHR_I32, VOP2, VOP3A},
    {"v_ashrrev_b16", V_ASHRREV_B16, VOP2, VOP3A},
    {"v_ashrrev_i32", V_ASHRREV_I32, VOP2, VOP3A},
    {"v_lshlrev_b32", V_LSHLREV_B32, VOP2, VOP3A},
    {"v_lshr_b32", V_LSHR_B32, VOP2, VOP3A},
    // VOP2: extended VOP3B
    {"v_addc_co_u32", V_ADDC_CO_U32, VOP2, VOP3B},
    {"v_addc_u32", V_ADDC_U32, VOP2, VOP3B},
    {"v_add_u32", V_ADD_U32, VOP2, VOP3B},
    {"v_subrev_u32", V_SUBREV_U32, VOP2, VOP3B},
    {"v_sub_u32", V_SUB_U32, VOP2, VOP3B},
    {"v_sub_co_u32", V_SUB_CO_U32, VOP2, VOP3B},
    {"v_add_i16", V_ADD_I16, VOP2, VOP3B},
    {"v_add_i32", V_ADD_I32, VOP2, VOP3B},

    // VOP3A
    {"v_lshlrev_b64", V_LSHLREV_B64, UNDEFINED, VOP3A},
    {"v_mul_lo_u32", V_MUL_LO_U32, UNDEFINED, VOP3A},
    {"v_add3_u32", V_ADD3_U32, UNDEFINED, VOP3A},
    // VOP3B
    {"v_div_scale_f32", V_DIV_SCALE_F32, UNDEFINED, VOP3B},
    {"v_div_scale_f64", V_DIV_SCALE_F64, UNDEFINED, VOP3B},
    {"v_mad_u64_u32", V_MAD_U64_U32, UNDEFINED, VOP3B},
    {"v_mad_i64_i32", V_MAD_I64_I32, UNDEFINED, VOP3B},

    // VOPC
    {"v_cmp_f_i16", V_CMP_F_I16, VOPC, VOP3A},
    {"v_cmp_lt_i16", V_CMP_LT_I16, VOPC, VOP3A},
    {"v_cmp_eq_i16", V_CMP_EQ_I16, VOPC, VOP3A},
    {"v_cmp_le_i16", V_CMP_LE_I16, VOPC, VOP3A},
    {"v_cmp_gt_i16", V_CMP_GT_I16, VOPC, VOP3A},
    {"v_cmp_lg_i16", V_CMP_LG_I16, VOPC, VOP3A},
    {"v_cmp_ge_i16", V_CMP_GE_I16, VOPC, VOP3A},
    {"v_cmp_tru_i16", V_CMP_TRU_I16, VOPC, VOP3A},
    {"v_cmp_f_u16", V_CMP_F_U16, VOPC, VOP3A},
    {"v_cmp_lt_u16", V_CMP_LT_U16, VOPC, VOP3A},
    {"v_cmp_eq_u16", V_CMP_EQ_U16, VOPC, VOP3A},
    {"v_cmp_le_u16", V_CMP_LE_U16, VOPC, VOP3A},
    {"v_cmp_gt_u16", V_CMP_GT_U16, VOPC, VOP3A},
    {"v_cmp_lg_u16", V_CMP_LG_U16, VOPC, VOP3A},
    {"v_cmp_ge_u16", V_CMP_GE_U16, VOPC, VOP3A},
    {"v_cmp_tru_u16", V_CMP_TRU_U16, VOPC, VOP3A},
    {"v_cmpx_f_i16", V_CMPX_F_I16, VOPC, VOP3A},
    {"v_cmpx_lt_i16", V_CMPX_LT_I16, VOPC, VOP3A},
    {"v_cmpx_eq_i16", V_CMPX_EQ_I16, VOPC, VOP3A},
    {"v_cmpx_le_i16", V_CMPX_LE_I16, VOPC, VOP3A},
    {"v_cmpx_gt_i16", V_CMPX_GT_I16, VOPC, VOP3A},
    {"v_cmpx_lg_i16", V_CMPX_LG_I16, VOPC, VOP3A},
    {"v_cmpx_ge_i16", V_CMPX_GE_I16, VOPC, VOP3A},
    {"v_cmpx_tru_i16", V_CMPX_TRU_I16, VOPC, VOP3A},
    {"v_cmpx_f_u16", V_CMPX_F_U16, VOPC, VOP3A},
    {"v_cmpx_lt_u16", V_CMPX_LT_U16, VOPC, VOP3A},
    {"v_cmpx_eq_u16", V_CMPX_EQ_U16, VOPC, VOP3A},
    {"v_cmpx_le_u16", V_CMPX_LE_U16, VOPC, VOP3A},
    {"v_cmpx_gt_u16", V_CMPX_GT_U16, VOPC, VOP3A},
    {"v_cmpx_lg_u16", V_CMPX_LG_U16, VOPC, VOP3A},
    {"v_cmpx_ge_u16", V_CMPX_GE_U16, VOPC, VOP3A},
    {"v_cmpx_tru_u16", V_CMPX_TRU_U16, VOPC, VOP3A},
    {"v_cmp_f_i32", V_CMP_F_I32, VOPC, VOP3A},
    {"v_cmp_lt_i32", V_CMP_LT_I32, VOPC, VOP3A},
    {"v_cmp_eq_i32", V_CMP_EQ_I32, VOPC, VOP3A},
    {"v_cmp_le_i32", V_CMP_LE_I32, VOPC, VOP3A},
    {"v_cmp_gt_i32", V_CMP_GT_I32, VOPC, VOP3A},
    {"v_cmp_lg_i32", V_CMP_LG_I32, VOPC, VOP3A},
    {"v_cmp_ge_i32", V_CMP_GE_I32, VOPC, VOP3A},
    {"v_cmp_tru_i32", V_CMP_TRU_I32, VOPC, VOP3A},
    {"v_cmp_f_u32", V_CMP_F_U32, VOPC, VOP3A},
    {"v_cmp_lt_u32", V_CMP_LT_U32, VOPC, UNDEFINED},
    {"v_cmp_eq_u32", V_CMP_EQ_U32, VOPC, VOP3A},
    {"v_cmp_le_u32", V_CMP_LE_U32, VOPC, VOP3A},
    {"v_cmp_gt_u32", V_CMP_GT_U32, VOPC, VOP3A},
    {"v_cmp_lg_u32", V_CMP_LG_U32, VOPC, VOP3A},
    {"v_cmp_ge_u32", V_CMP_GE_U32, VOPC, VOP3A},
    {"v_cmp_tru_u32", V_CMP_TRU_U32, VOPC, VOP3A},
    {"v_cmpx_f_i32", V_CMPX_F_I32, VOPC, VOP3A},
    {"v_cmpx_lt_i32", V_CMPX_LT_I32, VOPC, VOP3A},
    {"v_cmpx_eq_i32", V_CMPX_EQ_I32, VOPC, VOP3A},
    {"v_cmpx_le_i32", V_CMPX_LE_I32, VOPC, VOP3A},
    {"v_cmpx_gt_i32", V_CMPX_GT_I32, VOPC, VOP3A},
    {"v_cmpx_lg_i32", V_CMPX_LG_I32, VOPC, VOP3A},
    {"v_cmpx_ge_i32", V_CMPX_GE_I32, VOPC, VOP3A},
    {"v_cmpx_tru_i32", V_CMPX_TRU_I32, VOPC, VOP3A},
    {"v_cmpx_f_u32", V_CMPX_F_U32, VOPC, VOP3A},
    {"v_cmpx_lt_u32", V_CMPX_LT_U32, VOPC, VOP3A},
    {"v_cmpx_eq_u32", V_CMPX_EQ_U32, VOPC, VOP3A},
    {"v_cmpx_le_u32", V_CMPX_LE_U32, VOPC, VOP3A},
    {"v_cmpx_gt_u32", V_CMPX_GT_U32, VOPC, VOP3A},
    {"v_cmpx_lg_u32", V_CMPX_LG_U32, VOPC, VOP3A},
    {"v_cmpx_ge_u32", V_CMPX_GE_U32, VOPC, VOP3A},
    {"v_cmpx_tru_u32", V_CMPX_TRU_U32, VOPC, VOP3A},
    {"v_cmp_f_i64", V_CMP_F_I64, VOPC, VOP3A},
    {"v_cmp_lt_i64", V_CMP_LT_I64, VOPC, VOP3A},
    {"v_cmp_eq_i64", V_CMP_EQ_I64, VOPC, VOP3A},
    {"v_cmp_le_i64", V_CMP_LE_I64, VOPC, VOP3A},
    {"v_cmp_gt_i64", V_CMP_GT_I64, VOPC, VOP3A},
    {"v_cmp_lg_i64", V_CMP_LG_I64, VOPC, VOP3A},
    {"v_cmp_ge_i64", V_CMP_GE_I64, VOPC, VOP3A},
    {"v_cmp_tru_i64", V_CMP_TRU_I64, VOPC, VOP3A},
    {"v_cmp_f_u64", V_CMP_F_U64, VOPC, VOP3A},
    {"v_cmp_lt_u64", V_CMP_LT_U64, VOPC, VOP3A},
    {"v_cmp_eq_u64", V_CMP_EQ_U64, VOPC, VOP3A},
    {"v_cmp_le_u64", V_CMP_LE_U64, VOPC, VOP3A},
    {"v_cmp_gt_u64", V_CMP_GT_U64, VOPC, VOP3A},
    {"v_cmp_lg_u64", V_CMP_LG_U64, VOPC, VOP3A},
    {"v_cmp_ge_u64", V_CMP_GE_U64, VOPC, VOP3A},
    {"v_cmp_tru_u64", V_CMP_TRU_U64, VOPC, VOP3A},
    {"v_cmpx_f_i64", V_CMPX_F_I64, VOPC, VOP3A},
    {"v_cmpx_lt_i64", V_CMPX_LT_I64, VOPC, VOP3A},
    {"v_cmpx_eq_i64", V_CMPX_EQ_I64, VOPC, VOP3A},
    {"v_cmpx_le_i64", V_CMPX_LE_I64, VOPC, VOP3A},
    {"v_cmpx_gt_i64", V_CMPX_GT_I64, VOPC, VOP3A},
    {"v_cmpx_lg_i64", V_CMPX_LG_I64, VOPC, VOP3A},
    {"v_cmpx_ge_i64", V_CMPX_GE_I64, VOPC, VOP3A},
    {"v_cmpx_tru_i64", V_CMPX_TRU_I64, VOPC, VOP3A},
    {"v_cmpx_f_u64", V_CMPX_F_U64, VOPC, VOP3A},
    {"v_cmpx_lt_u64", V_CMPX_LT_U64, VOPC, VOP3A},
    {"v_cmpx_eq_u64", V_CMPX_EQ_U64, VOPC, VOP3A},
    {"v_cmpx_le_u64", V_CMPX_LE_U64, VOPC, VOP3A},
    {"v_cmpx_gt_u64", V_CMPX_GT_U64, VOPC, VOP3A},
    {"v_cmpx_lg_u64", V_CMPX_LG_U64, VOPC, VOP3A},
    {"v_cmpx_ge_u64", V_CMPX_GE_U64, VOPC, VOP3A},
    {"v_cmpx_tru_u64", V_CMPX_TRU_U64, VOPC, VOP3A},
    {"v_cmp_f_f32" , V_CMP_F_F32, VOPC, VOP3A},
    {"v_cmp_lt_f32" , V_CMP_LT_F32, VOPC, VOP3A},
    {"v_cmp_eq_f32" , V_CMP_EQ_F32, VOPC, VOP3A},
    {"v_cmp_le_f32" , V_CMP_LE_F32, VOPC, VOP3A},
    {"v_cmp_gt_f32" , V_CMP_GT_F32, VOPC, VOP3A},
    {"v_cmp_lg_f32" , V_CMP_LG_F32, VOPC, VOP3A},
    {"v_cmp_ge_f32" , V_CMP_GE_F32, VOPC, VOP3A},
    {"v_cmp_o_f32" , V_CMP_O_F32, VOPC, VOP3A},
    {"v_cmp_u_f32" , V_CMP_U_F32, VOPC, VOP3A},
    {"v_cmp_nge_f32" , V_CMP_NGE_F32, VOPC, VOP3A},
    {"v_cmp_nlg_f32" , V_CMP_NLG_F32, VOPC, VOP3A},
    {"v_cmp_ngt_f32" , V_CMP_NGT_F32, VOPC, VOP3A},
    {"v_cmp_nle_f32" , V_CMP_NLE_F32, VOPC, VOP3A},
    {"v_cmp_neq_f32" , V_CMP_NEQ_F32, VOPC, VOP3A},
    {"v_cmp_nlt_f32" , V_CMP_NLT_F32, VOPC, VOP3A},
    {"v_cmp_tru_f32" , V_CMP_TRU_F32, VOPC, VOP3A},
    {"v_cmpx_f_f32" , V_CMPX_F_F32, VOPC, VOP3A},
    {"v_cmpx_lt_f32" , V_CMPX_LT_F32, VOPC, VOP3A},
    {"v_cmpx_eq_f32" , V_CMPX_EQ_F32, VOPC, VOP3A},
    {"v_cmpx_le_f32" , V_CMPX_LE_F32, VOPC, VOP3A},
    {"v_cmpx_gt_f32" , V_CMPX_GT_F32, VOPC, VOP3A},
    {"v_cmpx_lg_f32" , V_CMPX_LG_F32, VOPC, VOP3A},
    {"v_cmpx_ge_f32" , V_CMPX_GE_F32, VOPC, VOP3A},
    {"v_cmpx_o_f32" , V_CMPX_O_F32, VOPC, VOP3A},
    {"v_cmpx_u_f32" , V_CMPX_U_F32, VOPC, VOP3A},
    {"v_cmpx_nge_f32" , V_CMPX_NGE_F32, VOPC, VOP3A},
    {"v_cmpx_nlg_f32" , V_CMPX_NLG_F32, VOPC, VOP3A},
    {"v_cmpx_ngt_f32" , V_CMPX_NGT_F32, VOPC, VOP3A},
    {"v_cmpx_nle_f32" , V_CMPX_NLE_F32, VOPC, VOP3A},
    {"v_cmpx_neq_f32" , V_CMPX_NEQ_F32, VOPC, VOP3A},
    {"v_cmpx_nlt_f32" , V_CMPX_NLT_F32, VOPC, VOP3A},
    {"v_cmpx_tru_f32" , V_CMPX_TRU_F32, VOPC, VOP3A},
    {"v_cmps_f_f64" , V_CMPS_F_F64, VOPC, VOP3A},
    {"v_cmps_lt_f64" , V_CMPS_LT_F64, VOPC, VOP3A},
    {"v_cmps_eq_f64" , V_CMPS_EQ_F64, VOPC, VOP3A},
    {"v_cmps_le_f64" , V_CMPS_LE_F64, VOPC, VOP3A},
    {"v_cmps_gt_f64" , V_CMPS_GT_F64, VOPC, VOP3A},
    {"v_cmps_lg_f64" , V_CMPS_LG_F64, VOPC, VOP3A},
    {"v_cmps_ge_f64" , V_CMPS_GE_F64, VOPC, VOP3A},
    {"v_cmps_o_f64" , V_CMPS_O_F64, VOPC, VOP3A},
    {"v_cmps_u_f64" , V_CMPS_U_F64, VOPC, VOP3A},
    {"v_cmps_nge_f64" , V_CMPS_NGE_F64, VOPC, VOP3A},
    {"v_cmps_nlg_f64" , V_CMPS_NLG_F64, VOPC, VOP3A},
    {"v_cmps_ngt_f64" , V_CMPS_NGT_F64, VOPC, VOP3A},
    {"v_cmps_nle_f64" , V_CMPS_NLE_F64, VOPC, VOP3A},
    {"v_cmps_neq_f64" , V_CMPS_NEQ_F64, VOPC, VOP3A},
    {"v_cmps_nlt_f64" , V_CMPS_NLT_F64, VOPC, VOP3A},
    {"v_cmps_tru_f64" , V_CMPS_TRU_F64, VOPC, VOP3A},
    {"v_cmpx_f_f64" , V_CMPX_F_F64, VOPC, VOP3A},
    {"v_cmpx_lt_f64" , V_CMPX_LT_F64, VOPC, VOP3A},
    {"v_cmpx_eq_f64" , V_CMPX_EQ_F64, VOPC, VOP3A},
    {"v_cmpx_le_f64" , V_CMPX_LE_F64, VOPC, VOP3A},
    {"v_cmpx_gt_f64" , V_CMPX_GT_F64, VOPC, VOP3A},
    {"v_cmpx_lg_f64" , V_CMPX_LG_F64, VOPC, VOP3A},
    {"v_cmpx_ge_f64" , V_CMPX_GE_F64, VOPC, VOP3A},
    {"v_cmpx_o_f64" , V_CMPX_O_F64, VOPC, VOP3A},
    {"v_cmpx_u_f64" , V_CMPX_U_F64, VOPC, VOP3A},
    {"v_cmpx_nge_f64" , V_CMPX_NGE_F64, VOPC, VOP3A},
    {"v_cmpx_nlg_f64" , V_CMPX_NLG_F64, VOPC, VOP3A},
    {"v_cmpx_ngt_f64" , V_CMPX_NGT_F64, VOPC, VOP3A},
    {"v_cmpx_nle_f64" , V_CMPX_NLE_F64, VOPC, VOP3A},
    {"v_cmpx_neq_f64" , V_CMPX_NEQ_F64, VOPC, VOP3A},
    {"v_cmpx_nlt_f64" , V_CMPX_NLT_F64, VOPC, VOP3A},
    {"v_cmpx_tru_f64" , V_CMPX_TRU_F64, VOPC, VOP3A},

    // FLAT
    {"flat_store_dword", FLAT_STORE_DWORD, UNDEFINED, FLAT},
    {"flat_store_dwordx2", FLAT_STORE_DWORDX2, UNDEFINED, FLAT},
    {"flat_store_dwordx3", FLAT_STORE_DWORDX3, UNDEFINED, FLAT},
    {"flat_store_dwordx4", FLAT_STORE_DWORDX4, UNDEFINED, FLAT},
    {"flat_store_short", FLAT_STORE_SHORT, UNDEFINED, FLAT},
    {"flat_load_dword", FLAT_LOAD_DWORD, UNDEFINED, FLAT},
    {"flat_load_dwordx2", FLAT_LOAD_DWORDX2, UNDEFINED, FLAT},
    {"flat_load_dwordx3", FLAT_LOAD_DWORDX3, UNDEFINED, FLAT},
    {"flat_load_dwordx4", FLAT_LOAD_DWORDX4, UNDEFINED, FLAT},

    {"flat_atomic_add", FLAT_ATOMIC_ADD, UNDEFINED, FLAT},
    {"flat_atomic_add_x2", FLAT_ATOMIC_ADD_X2, UNDEFINED, FLAT},
    {"flat_atomic_sub", FLAT_ATOMIC_SUB, UNDEFINED, FLAT},
    {"flat_atomic_sub_x2", FLAT_ATOMIC_SUB_X2, UNDEFINED, FLAT},
    {"flat_atomic_smin", FLAT_ATOMIC_SMIN, UNDEFINED, FLAT},
    {"flat_atomic_smin_x2", FLAT_ATOMIC_SMIN_X2, UNDEFINED, FLAT},
    {"flat_atomic_umin", FLAT_ATOMIC_UMIN, UNDEFINED, FLAT},
    {"flat_atomic_umin_x2", FLAT_ATOMIC_UMIN_X2, UNDEFINED, FLAT},
    {"flat_atomic_smax", FLAT_ATOMIC_SMAX, UNDEFINED, FLAT},
    {"flat_atomic_smax_x2", FLAT_ATOMIC_SMAX_X2, UNDEFINED, FLAT},
    {"flat_atomic_umax", FLAT_ATOMIC_UMAX, UNDEFINED, FLAT},
    {"flat_atomic_umax_x2", FLAT_ATOMIC_UMAX_X2, UNDEFINED, FLAT},
    {"flat_atomic_and", FLAT_ATOMIC_AND, UNDEFINED, FLAT},
    {"flat_atomic_and_x2", FLAT_ATOMIC_AND_X2, UNDEFINED, FLAT},
    {"flat_atomic_or", FLAT_ATOMIC_OR, UNDEFINED, FLAT},
    {"flat_atomic_or_x2", FLAT_ATOMIC_OR_X2, UNDEFINED, FLAT},
    {"flat_atomic_xor", FLAT_ATOMIC_XOR, UNDEFINED, FLAT},
    {"flat_atomic_xor_x2", FLAT_ATOMIC_XOR_X2, UNDEFINED, FLAT},
    {"flat_atomic_inc", FLAT_ATOMIC_INC, UNDEFINED, FLAT},
    {"flat_atomic_inc_x2", FLAT_ATOMIC_INC_X2, UNDEFINED, FLAT},
    {"flat_atomic_dec", FLAT_ATOMIC_DEC, UNDEFINED, FLAT},
    {"flat_atomic_dec_x2", FLAT_ATOMIC_DEC_X2, UNDEFINED, FLAT},
};

InstrKey get_instr_key(const std::string& instruction) {
    auto it =
        std::find_if(std::begin(instructionRepo), std::end(instructionRepo),
                     [&instruction](const InstructionView& curInstr) {
                         return std::strcmp(instruction.c_str(), curInstr.mnemonic) == 0;
                     });

    if (it == std::end(instructionRepo)) {
        throw std::runtime_error(std::string("Undefined mnemonic: ") + instruction);
    }

    return it->key;
}

char const* get_mnemonic(InstrKey key) {
    auto it = std::find_if(std::begin(instructionRepo), std::end(instructionRepo),
                           [&key](const InstructionView& curInstr) {
                               return key == curInstr.key;
                           });
    if (it == std::end(instructionRepo)) {
        throw std::runtime_error(
            std::string("No instruction mnemonic was found for key: ") +
            std::to_string(key));
    }

    return it->mnemonic;
}

InstrFormat get_instr_format(InstrKey instrKey, size_t widthBytes) {
    auto it = std::find_if(std::begin(instructionRepo), std::end(instructionRepo),
                           [&instrKey](const InstructionView& curInstr) {
                               return instrKey == curInstr.key;
                           });
    if (it == std::end(instructionRepo)) {
        throw std::runtime_error(std::string("Can't find InstructionView for ") +
                                 get_mnemonic(instrKey));
    }

    InstrFormat format = UNDEFINED;
    if (widthBytes == 4) {
        format = it->format;
    } else if (widthBytes == 8) {
        format = it->extendedFormat;
    }
    if (format != UNDEFINED) return format;

//    logger.warn(std::string("Can not resolve instruction format for ") +
//                get_mnemonic(instrKey) + " with width in bytes " +
//                std::to_string(widthBytes));
    format = it->format != UNDEFINED ? it->format : it->extendedFormat;

    if (format != UNDEFINED) return format;
    throw std::runtime_error(std::string("Undefined format for instruction ") +
                             it->mnemonic);
}